/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IDatasetInfoApi {
  export type RequestBodyStruct = { url: string; abi_signature: string };

  export type RequestBodyStructOutput = [url: string, abi_signature: string] & {
    url: string;
    abi_signature: string;
  };

  export type ResponseBodyStruct = { abi_encoded_data: BytesLike };

  export type ResponseBodyStructOutput = [abi_encoded_data: string] & {
    abi_encoded_data: string;
  };

  export type ResponseStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    votingRound: BigNumberish;
    lowestUsedTimestamp: BigNumberish;
    requestBody: IDatasetInfoApi.RequestBodyStruct;
    responseBody: IDatasetInfoApi.ResponseBodyStruct;
  };

  export type ResponseStructOutput = [
    attestationType: string,
    sourceId: string,
    votingRound: bigint,
    lowestUsedTimestamp: bigint,
    requestBody: IDatasetInfoApi.RequestBodyStructOutput,
    responseBody: IDatasetInfoApi.ResponseBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    votingRound: bigint;
    lowestUsedTimestamp: bigint;
    requestBody: IDatasetInfoApi.RequestBodyStructOutput;
    responseBody: IDatasetInfoApi.ResponseBodyStructOutput;
  };

  export type ProofStruct = {
    merkleProof: BytesLike[];
    data: IDatasetInfoApi.ResponseStruct;
  };

  export type ProofStructOutput = [
    merkleProof: string[],
    data: IDatasetInfoApi.ResponseStructOutput
  ] & { merkleProof: string[]; data: IDatasetInfoApi.ResponseStructOutput };

  export type RequestStruct = {
    attestationType: BytesLike;
    sourceId: BytesLike;
    messageIntegrityCode: BytesLike;
    requestBody: IDatasetInfoApi.RequestBodyStruct;
  };

  export type RequestStructOutput = [
    attestationType: string,
    sourceId: string,
    messageIntegrityCode: string,
    requestBody: IDatasetInfoApi.RequestBodyStructOutput
  ] & {
    attestationType: string;
    sourceId: string;
    messageIntegrityCode: string;
    requestBody: IDatasetInfoApi.RequestBodyStructOutput;
  };
}

export interface IDatasetInfoApiTemporaryInterface extends Interface {
  getFunction(
    nameOrSignature: "proof" | "request" | "response"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "proof",
    values: [IDatasetInfoApi.ProofStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "request",
    values: [IDatasetInfoApi.RequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "response",
    values: [IDatasetInfoApi.ResponseStruct]
  ): string;

  decodeFunctionResult(functionFragment: "proof", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "response", data: BytesLike): Result;
}

export interface IDatasetInfoApiTemporary extends BaseContract {
  connect(runner?: ContractRunner | null): IDatasetInfoApiTemporary;
  waitForDeployment(): Promise<this>;

  interface: IDatasetInfoApiTemporaryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  proof: TypedContractMethod<
    [_proof: IDatasetInfoApi.ProofStruct],
    [void],
    "view"
  >;

  request: TypedContractMethod<
    [_request: IDatasetInfoApi.RequestStruct],
    [void],
    "view"
  >;

  response: TypedContractMethod<
    [_response: IDatasetInfoApi.ResponseStruct],
    [void],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "proof"
  ): TypedContractMethod<[_proof: IDatasetInfoApi.ProofStruct], [void], "view">;
  getFunction(
    nameOrSignature: "request"
  ): TypedContractMethod<
    [_request: IDatasetInfoApi.RequestStruct],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "response"
  ): TypedContractMethod<
    [_response: IDatasetInfoApi.ResponseStruct],
    [void],
    "view"
  >;

  filters: {};
}
